Suraj: Hey Karan! I’m working on this new microservice for KPIs, and it’s going to be super write-heavy. I also need something that’s ACID compliant. Any recommendations on the database?

Karan: Hey, Suraj! Sure, there are a few options. For a write-heavy microservice with ACID compliance, you could look into PostgreSQL, MySQL, or even a NoSQL option like MongoDB with ACID transactions enabled. Have you looked into any of these?

Suraj: Yeah, I was thinking about PostgreSQL because it’s known for ACID compliance and strong write consistency. But I wasn’t sure how it would handle a write-heavy load compared to others. Do you think it can keep up?

Karan: PostgreSQL can handle high writes, especially with optimizations like partitioning and indexing. However, if you're looking for extremely high throughput, you might want to consider NoSQL options like Cassandra or DynamoDB. They’re designed for distributed architectures, which handle high writes really well. Although, they’re not traditionally ACID compliant.

Suraj: Right, ACID is crucial for this microservice to keep KPI data accurate. I heard that MongoDB has transactions now. Do you think it could work for a write-heavy scenario and still meet ACID requirements?

Karan: MongoDB does have ACID transactions since version 4.0, and it performs well with write-heavy operations if you set up sharding and replica sets correctly. However, it might still fall short in terms of the write speed you’d get from a system like Cassandra, which is more write-optimized. MongoDB’s transactions work well but aren’t as fine-tuned for heavy transactional processing.

Suraj: Got it. MySQL could also be an option. It’s ACID compliant by default, and with the InnoDB engine, writes are handled pretty well. But I think sharding and scaling could be tougher compared to MongoDB, especially as the data grows.

Karan: You’re right. MySQL can handle decent write loads, but scaling it horizontally can be challenging without complex replication setups. MongoDB, by design, is easier to scale, which would be more efficient in the long run if the write load increases. PostgreSQL also supports sharding now but requires more work to set up compared to MongoDB.

Suraj: So it’s coming down to MongoDB and PostgreSQL. PostgreSQL feels reliable for ACID and write consistency but may need more tuning for performance. MongoDB is more flexible and handles sharding better, but I wonder if the ACID transactions would be enough for high write consistency.

Karan: Yeah, it’s a trade-off. If flexibility in scaling is a top priority and you’re okay with some tuning, MongoDB with ACID transactions is a solid option. But if you’re prioritizing strong consistency and are okay with managing some of the scaling overhead, PostgreSQL might be the better choice.

Suraj: I think MongoDB makes more sense for scalability and the write load I’m expecting. Plus, the ACID transactions should cover my data consistency requirements well enough. Thanks for the insights, Karan!

Karan: No problem, Suraj! Sounds like a good choice. MongoDB will give you that scalability with write performance you need. Let me know how it goes!